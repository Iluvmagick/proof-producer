// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace detail {
class AnyMetadata;
}  // namespace detail
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::detail::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::detail::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::detail::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::detail::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::detail::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::detail::DescriptorTable descriptor_table_metrics2_2eproto;
namespace io {
namespace prometheus {
namespace client {
class Bucket;
class BucketDefaultTypeInternal;
extern BucketDefaultTypeInternal _Bucket_default_instance_;
class Counter;
class CounterDefaultTypeInternal;
extern CounterDefaultTypeInternal _Counter_default_instance_;
class Gauge;
class GaugeDefaultTypeInternal;
extern GaugeDefaultTypeInternal _Gauge_default_instance_;
class Histogram;
class HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class LabelPair;
class LabelPairDefaultTypeInternal;
extern LabelPairDefaultTypeInternal _LabelPair_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricFamily;
class MetricFamilyDefaultTypeInternal;
extern MetricFamilyDefaultTypeInternal _MetricFamily_default_instance_;
class Quantile;
class QuantileDefaultTypeInternal;
extern QuantileDefaultTypeInternal _Quantile_default_instance_;
class Summary;
class SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class Untyped;
class UntypedDefaultTypeInternal;
extern UntypedDefaultTypeInternal _Untyped_default_instance_;
}  // namespace client
}  // namespace prometheus
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::prometheus::client::Bucket* Arena::CreateMaybeMessage<::io::prometheus::client::Bucket>(Arena*);
template<> ::io::prometheus::client::Counter* Arena::CreateMaybeMessage<::io::prometheus::client::Counter>(Arena*);
template<> ::io::prometheus::client::Gauge* Arena::CreateMaybeMessage<::io::prometheus::client::Gauge>(Arena*);
template<> ::io::prometheus::client::Histogram* Arena::CreateMaybeMessage<::io::prometheus::client::Histogram>(Arena*);
template<> ::io::prometheus::client::LabelPair* Arena::CreateMaybeMessage<::io::prometheus::client::LabelPair>(Arena*);
template<> ::io::prometheus::client::Metric* Arena::CreateMaybeMessage<::io::prometheus::client::Metric>(Arena*);
template<> ::io::prometheus::client::MetricFamily* Arena::CreateMaybeMessage<::io::prometheus::client::MetricFamily>(Arena*);
template<> ::io::prometheus::client::Quantile* Arena::CreateMaybeMessage<::io::prometheus::client::Quantile>(Arena*);
template<> ::io::prometheus::client::Summary* Arena::CreateMaybeMessage<::io::prometheus::client::Summary>(Arena*);
template<> ::io::prometheus::client::Untyped* Arena::CreateMaybeMessage<::io::prometheus::client::Untyped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace prometheus {
namespace client {

enum MetricType : int {
  COUNTER = 0,
  GAUGE = 1,
  SUMMARY = 2,
  UNTYPED = 3,
  HISTOGRAM = 4
};
bool MetricType_IsValid(int value);
constexpr MetricType MetricType_MIN = COUNTER;
constexpr MetricType MetricType_MAX = HISTOGRAM;
constexpr int MetricType_ARRAYSIZE = MetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricType_descriptor();
template<typename T>
inline const std::string& MetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::detail::NameOfEnum(
    MetricType_descriptor(), enum_t_value);
}
inline bool MetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::detail::ParseNamedEnum<MetricType>(
    MetricType_descriptor(), name, value);
}
// ===================================================================

class LabelPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.LabelPair) */ {
 public:
  inline LabelPair() : LabelPair(nullptr) {}
  virtual ~LabelPair();

  LabelPair(const LabelPair& from);
  LabelPair(LabelPair&& from) noexcept
    : LabelPair() {
    *this = ::std::move(from);
  }

  inline LabelPair& operator=(const LabelPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelPair& operator=(LabelPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelPair& default_instance();

  static inline const LabelPair* internal_default_instance() {
    return reinterpret_cast<const LabelPair*>(
               &_LabelPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LabelPair& a, LabelPair& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelPair* New() const final {
    return CreateMaybeMessage<LabelPair>(nullptr);
  }

  LabelPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelPair& from);
  void MergeFrom(const LabelPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.LabelPair";
  }
  protected:
  explicit LabelPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.LabelPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr value_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Gauge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Gauge) */ {
 public:
  inline Gauge() : Gauge(nullptr) {}
  virtual ~Gauge();

  Gauge(const Gauge& from);
  Gauge(Gauge&& from) noexcept
    : Gauge() {
    *this = ::std::move(from);
  }

  inline Gauge& operator=(const Gauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gauge& operator=(Gauge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gauge& default_instance();

  static inline const Gauge* internal_default_instance() {
    return reinterpret_cast<const Gauge*>(
               &_Gauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Gauge& a, Gauge& b) {
    a.Swap(&b);
  }
  inline void Swap(Gauge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gauge* New() const final {
    return CreateMaybeMessage<Gauge>(nullptr);
  }

  Gauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gauge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gauge& from);
  void MergeFrom(const Gauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gauge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Gauge";
  }
  protected:
  explicit Gauge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Gauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  double value_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Counter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Counter) */ {
 public:
  inline Counter() : Counter(nullptr) {}
  virtual ~Counter();

  Counter(const Counter& from);
  Counter(Counter&& from) noexcept
    : Counter() {
    *this = ::std::move(from);
  }

  inline Counter& operator=(const Counter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counter& operator=(Counter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Counter& default_instance();

  static inline const Counter* internal_default_instance() {
    return reinterpret_cast<const Counter*>(
               &_Counter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Counter& a, Counter& b) {
    a.Swap(&b);
  }
  inline void Swap(Counter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Counter* New() const final {
    return CreateMaybeMessage<Counter>(nullptr);
  }

  Counter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Counter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Counter& from);
  void MergeFrom(const Counter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Counter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Counter";
  }
  protected:
  explicit Counter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Counter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  double value_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Quantile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Quantile) */ {
 public:
  inline Quantile() : Quantile(nullptr) {}
  virtual ~Quantile();

  Quantile(const Quantile& from);
  Quantile(Quantile&& from) noexcept
    : Quantile() {
    *this = ::std::move(from);
  }

  inline Quantile& operator=(const Quantile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quantile& operator=(Quantile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quantile& default_instance();

  static inline const Quantile* internal_default_instance() {
    return reinterpret_cast<const Quantile*>(
               &_Quantile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Quantile& a, Quantile& b) {
    a.Swap(&b);
  }
  inline void Swap(Quantile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quantile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quantile* New() const final {
    return CreateMaybeMessage<Quantile>(nullptr);
  }

  Quantile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quantile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quantile& from);
  void MergeFrom(const Quantile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quantile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Quantile";
  }
  protected:
  explicit Quantile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantileFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional double quantile = 1;
  bool has_quantile() const;
  private:
  bool _internal_has_quantile() const;
  public:
  void clear_quantile();
  double quantile() const;
  void set_quantile(double value);
  private:
  double _internal_quantile() const;
  void _internal_set_quantile(double value);
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Quantile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  double quantile_;
  double value_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  virtual ~Summary();

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance();

  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantileFieldNumber = 3,
    kSampleCountFieldNumber = 1,
    kSampleSumFieldNumber = 2,
  };
  // repeated .io.prometheus.client.Quantile quantile = 3;
  int quantile_size() const;
  private:
  int _internal_quantile_size() const;
  public:
  void clear_quantile();
  ::io::prometheus::client::Quantile* mutable_quantile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Quantile >*
      mutable_quantile();
  private:
  const ::io::prometheus::client::Quantile& _internal_quantile(int index) const;
  ::io::prometheus::client::Quantile* _internal_add_quantile();
  public:
  const ::io::prometheus::client::Quantile& quantile(int index) const;
  ::io::prometheus::client::Quantile* add_quantile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Quantile >&
      quantile() const;

  // optional uint64 sample_count = 1;
  bool has_sample_count() const;
  private:
  bool _internal_has_sample_count() const;
  public:
  void clear_sample_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_count() const;
  void set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sample_count() const;
  void _internal_set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double sample_sum = 2;
  bool has_sample_sum() const;
  private:
  bool _internal_has_sample_sum() const;
  public:
  void clear_sample_sum();
  double sample_sum() const;
  void set_sample_sum(double value);
  private:
  double _internal_sample_sum() const;
  void _internal_set_sample_sum(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Quantile > quantile_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_count_;
  double sample_sum_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Untyped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Untyped) */ {
 public:
  inline Untyped() : Untyped(nullptr) {}
  virtual ~Untyped();

  Untyped(const Untyped& from);
  Untyped(Untyped&& from) noexcept
    : Untyped() {
    *this = ::std::move(from);
  }

  inline Untyped& operator=(const Untyped& from) {
    CopyFrom(from);
    return *this;
  }
  inline Untyped& operator=(Untyped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Untyped& default_instance();

  static inline const Untyped* internal_default_instance() {
    return reinterpret_cast<const Untyped*>(
               &_Untyped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Untyped& a, Untyped& b) {
    a.Swap(&b);
  }
  inline void Swap(Untyped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Untyped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Untyped* New() const final {
    return CreateMaybeMessage<Untyped>(nullptr);
  }

  Untyped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Untyped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Untyped& from);
  void MergeFrom(const Untyped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Untyped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Untyped";
  }
  protected:
  explicit Untyped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Untyped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  double value_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Histogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Histogram) */ {
 public:
  inline Histogram() : Histogram(nullptr) {}
  virtual ~Histogram();

  Histogram(const Histogram& from);
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histogram& operator=(Histogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Histogram& default_instance();

  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(Histogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Histogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return CreateMaybeMessage<Histogram>(nullptr);
  }

  Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Histogram";
  }
  protected:
  explicit Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 3,
    kSampleCountFieldNumber = 1,
    kSampleSumFieldNumber = 2,
  };
  // repeated .io.prometheus.client.Bucket bucket = 3;
  int bucket_size() const;
  private:
  int _internal_bucket_size() const;
  public:
  void clear_bucket();
  ::io::prometheus::client::Bucket* mutable_bucket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Bucket >*
      mutable_bucket();
  private:
  const ::io::prometheus::client::Bucket& _internal_bucket(int index) const;
  ::io::prometheus::client::Bucket* _internal_add_bucket();
  public:
  const ::io::prometheus::client::Bucket& bucket(int index) const;
  ::io::prometheus::client::Bucket* add_bucket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Bucket >&
      bucket() const;

  // optional uint64 sample_count = 1;
  bool has_sample_count() const;
  private:
  bool _internal_has_sample_count() const;
  public:
  void clear_sample_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_count() const;
  void set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sample_count() const;
  void _internal_set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double sample_sum = 2;
  bool has_sample_sum() const;
  private:
  bool _internal_has_sample_sum() const;
  public:
  void clear_sample_sum();
  double sample_sum() const;
  void set_sample_sum(double value);
  private:
  double _internal_sample_sum() const;
  void _internal_set_sample_sum(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Histogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Bucket > bucket_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_count_;
  double sample_sum_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Bucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Bucket) */ {
 public:
  inline Bucket() : Bucket(nullptr) {}
  virtual ~Bucket();

  Bucket(const Bucket& from);
  Bucket(Bucket&& from) noexcept
    : Bucket() {
    *this = ::std::move(from);
  }

  inline Bucket& operator=(const Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket& operator=(Bucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket& default_instance();

  static inline const Bucket* internal_default_instance() {
    return reinterpret_cast<const Bucket*>(
               &_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Bucket& a, Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket* New() const final {
    return CreateMaybeMessage<Bucket>(nullptr);
  }

  Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket& from);
  void MergeFrom(const Bucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Bucket";
  }
  protected:
  explicit Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCumulativeCountFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
  };
  // optional uint64 cumulative_count = 1;
  bool has_cumulative_count() const;
  private:
  bool _internal_has_cumulative_count() const;
  public:
  void clear_cumulative_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_count() const;
  void set_cumulative_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cumulative_count() const;
  void _internal_set_cumulative_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double upper_bound = 2;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_count_;
  double upper_bound_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kGaugeFieldNumber = 2,
    kCounterFieldNumber = 3,
    kSummaryFieldNumber = 4,
    kUntypedFieldNumber = 5,
    kHistogramFieldNumber = 7,
    kTimestampMsFieldNumber = 6,
  };
  // repeated .io.prometheus.client.LabelPair label = 1;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  ::io::prometheus::client::LabelPair* mutable_label(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::LabelPair >*
      mutable_label();
  private:
  const ::io::prometheus::client::LabelPair& _internal_label(int index) const;
  ::io::prometheus::client::LabelPair* _internal_add_label();
  public:
  const ::io::prometheus::client::LabelPair& label(int index) const;
  ::io::prometheus::client::LabelPair* add_label();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::LabelPair >&
      label() const;

  // optional .io.prometheus.client.Gauge gauge = 2;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;
  public:
  void clear_gauge();
  const ::io::prometheus::client::Gauge& gauge() const;
  ::io::prometheus::client::Gauge* release_gauge();
  ::io::prometheus::client::Gauge* mutable_gauge();
  void set_allocated_gauge(::io::prometheus::client::Gauge* gauge);
  private:
  const ::io::prometheus::client::Gauge& _internal_gauge() const;
  ::io::prometheus::client::Gauge* _internal_mutable_gauge();
  public:
  void unsafe_arena_set_allocated_gauge(
      ::io::prometheus::client::Gauge* gauge);
  ::io::prometheus::client::Gauge* unsafe_arena_release_gauge();

  // optional .io.prometheus.client.Counter counter = 3;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  const ::io::prometheus::client::Counter& counter() const;
  ::io::prometheus::client::Counter* release_counter();
  ::io::prometheus::client::Counter* mutable_counter();
  void set_allocated_counter(::io::prometheus::client::Counter* counter);
  private:
  const ::io::prometheus::client::Counter& _internal_counter() const;
  ::io::prometheus::client::Counter* _internal_mutable_counter();
  public:
  void unsafe_arena_set_allocated_counter(
      ::io::prometheus::client::Counter* counter);
  ::io::prometheus::client::Counter* unsafe_arena_release_counter();

  // optional .io.prometheus.client.Summary summary = 4;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::io::prometheus::client::Summary& summary() const;
  ::io::prometheus::client::Summary* release_summary();
  ::io::prometheus::client::Summary* mutable_summary();
  void set_allocated_summary(::io::prometheus::client::Summary* summary);
  private:
  const ::io::prometheus::client::Summary& _internal_summary() const;
  ::io::prometheus::client::Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::io::prometheus::client::Summary* summary);
  ::io::prometheus::client::Summary* unsafe_arena_release_summary();

  // optional .io.prometheus.client.Untyped untyped = 5;
  bool has_untyped() const;
  private:
  bool _internal_has_untyped() const;
  public:
  void clear_untyped();
  const ::io::prometheus::client::Untyped& untyped() const;
  ::io::prometheus::client::Untyped* release_untyped();
  ::io::prometheus::client::Untyped* mutable_untyped();
  void set_allocated_untyped(::io::prometheus::client::Untyped* untyped);
  private:
  const ::io::prometheus::client::Untyped& _internal_untyped() const;
  ::io::prometheus::client::Untyped* _internal_mutable_untyped();
  public:
  void unsafe_arena_set_allocated_untyped(
      ::io::prometheus::client::Untyped* untyped);
  ::io::prometheus::client::Untyped* unsafe_arena_release_untyped();

  // optional .io.prometheus.client.Histogram histogram = 7;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;
  public:
  void clear_histogram();
  const ::io::prometheus::client::Histogram& histogram() const;
  ::io::prometheus::client::Histogram* release_histogram();
  ::io::prometheus::client::Histogram* mutable_histogram();
  void set_allocated_histogram(::io::prometheus::client::Histogram* histogram);
  private:
  const ::io::prometheus::client::Histogram& _internal_histogram() const;
  ::io::prometheus::client::Histogram* _internal_mutable_histogram();
  public:
  void unsafe_arena_set_allocated_histogram(
      ::io::prometheus::client::Histogram* histogram);
  ::io::prometheus::client::Histogram* unsafe_arena_release_histogram();

  // optional int64 timestamp_ms = 6;
  bool has_timestamp_ms() const;
  private:
  bool _internal_has_timestamp_ms() const;
  public:
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::LabelPair > label_;
  ::io::prometheus::client::Gauge* gauge_;
  ::io::prometheus::client::Counter* counter_;
  ::io::prometheus::client::Summary* summary_;
  ::io::prometheus::client::Untyped* untyped_;
  ::io::prometheus::client::Histogram* histogram_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// -------------------------------------------------------------------

class MetricFamily PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.prometheus.client.MetricFamily) */ {
 public:
  inline MetricFamily() : MetricFamily(nullptr) {}
  virtual ~MetricFamily();

  MetricFamily(const MetricFamily& from);
  MetricFamily(MetricFamily&& from) noexcept
    : MetricFamily() {
    *this = ::std::move(from);
  }

  inline MetricFamily& operator=(const MetricFamily& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricFamily& operator=(MetricFamily&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricFamily& default_instance();

  static inline const MetricFamily* internal_default_instance() {
    return reinterpret_cast<const MetricFamily*>(
               &_MetricFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MetricFamily& a, MetricFamily& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricFamily* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::detail::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricFamily* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricFamily* New() const final {
    return CreateMaybeMessage<MetricFamily>(nullptr);
  }

  MetricFamily* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricFamily>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricFamily& from);
  void MergeFrom(const MetricFamily& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricFamily* other);
  friend class ::PROTOBUF_NAMESPACE_ID::detail::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.prometheus.client.MetricFamily";
  }
  protected:
  explicit MetricFamily(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&::descriptor_table_metrics2_2eproto);
    return ::descriptor_table_metrics2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 4,
    kNameFieldNumber = 1,
    kHelpFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .io.prometheus.client.Metric metric = 4;
  int metric_size() const;
  private:
  int _internal_metric_size() const;
  public:
  void clear_metric();
  ::io::prometheus::client::Metric* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Metric >*
      mutable_metric();
  private:
  const ::io::prometheus::client::Metric& _internal_metric(int index) const;
  ::io::prometheus::client::Metric* _internal_add_metric();
  public:
  const ::io::prometheus::client::Metric& metric(int index) const;
  ::io::prometheus::client::Metric* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Metric >&
      metric() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string help = 2;
  bool has_help() const;
  private:
  bool _internal_has_help() const;
  public:
  void clear_help();
  const std::string& help() const;
  void set_help(const std::string& value);
  void set_help(std::string&& value);
  void set_help(const char* value);
  void set_help(const char* value, size_t size);
  std::string* mutable_help();
  std::string* release_help();
  void set_allocated_help(std::string* help);
  private:
  const std::string& _internal_help() const;
  void _internal_set_help(const std::string& value);
  std::string* _internal_mutable_help();
  public:

  // optional .io.prometheus.client.MetricType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::io::prometheus::client::MetricType type() const;
  void set_type(::io::prometheus::client::MetricType value);
  private:
  ::io::prometheus::client::MetricType _internal_type() const;
  void _internal_set_type(::io::prometheus::client::MetricType value);
  public:

  // @@protoc_insertion_point(class_scope:io.prometheus.client.MetricFamily)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::detail::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::detail::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Metric > metric_;
  ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr help_;
  int type_;
  friend struct ::TableStruct_metrics2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabelPair

// optional string name = 1;
inline bool LabelPair::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LabelPair::has_name() const {
  return _internal_has_name();
}
inline void LabelPair::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LabelPair::name() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.LabelPair.name)
  return _internal_name();
}
inline void LabelPair::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.LabelPair.name)
}
inline std::string* LabelPair::mutable_name() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.LabelPair.name)
  return _internal_mutable_name();
}
inline const std::string& LabelPair::_internal_name() const {
  return name_.Get();
}
inline void LabelPair::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LabelPair::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.prometheus.client.LabelPair.name)
}
inline void LabelPair::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.prometheus.client.LabelPair.name)
}
inline void LabelPair::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.prometheus.client.LabelPair.name)
}
inline std::string* LabelPair::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LabelPair::release_name() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.LabelPair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelPair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.LabelPair.name)
}

// optional string value = 2;
inline bool LabelPair::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LabelPair::has_value() const {
  return _internal_has_value();
}
inline void LabelPair::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LabelPair::value() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.LabelPair.value)
  return _internal_value();
}
inline void LabelPair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.LabelPair.value)
}
inline std::string* LabelPair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.LabelPair.value)
  return _internal_mutable_value();
}
inline const std::string& LabelPair::_internal_value() const {
  return value_.Get();
}
inline void LabelPair::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LabelPair::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.prometheus.client.LabelPair.value)
}
inline void LabelPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.prometheus.client.LabelPair.value)
}
inline void LabelPair::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.prometheus.client.LabelPair.value)
}
inline std::string* LabelPair::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LabelPair::release_value() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.LabelPair.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.LabelPair.value)
}

// -------------------------------------------------------------------

// Gauge

// optional double value = 1;
inline bool Gauge::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gauge::has_value() const {
  return _internal_has_value();
}
inline void Gauge::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Gauge::_internal_value() const {
  return value_;
}
inline double Gauge::value() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Gauge.value)
  return _internal_value();
}
inline void Gauge::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Gauge::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Gauge.value)
}

// -------------------------------------------------------------------

// Counter

// optional double value = 1;
inline bool Counter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Counter::has_value() const {
  return _internal_has_value();
}
inline void Counter::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Counter::_internal_value() const {
  return value_;
}
inline double Counter::value() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Counter.value)
  return _internal_value();
}
inline void Counter::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Counter::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Counter.value)
}

// -------------------------------------------------------------------

// Quantile

// optional double quantile = 1;
inline bool Quantile::_internal_has_quantile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quantile::has_quantile() const {
  return _internal_has_quantile();
}
inline void Quantile::clear_quantile() {
  quantile_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Quantile::_internal_quantile() const {
  return quantile_;
}
inline double Quantile::quantile() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Quantile.quantile)
  return _internal_quantile();
}
inline void Quantile::_internal_set_quantile(double value) {
  _has_bits_[0] |= 0x00000001u;
  quantile_ = value;
}
inline void Quantile::set_quantile(double value) {
  _internal_set_quantile(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Quantile.quantile)
}

// optional double value = 2;
inline bool Quantile::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quantile::has_value() const {
  return _internal_has_value();
}
inline void Quantile::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Quantile::_internal_value() const {
  return value_;
}
inline double Quantile::value() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Quantile.value)
  return _internal_value();
}
inline void Quantile::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void Quantile::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Quantile.value)
}

// -------------------------------------------------------------------

// Summary

// optional uint64 sample_count = 1;
inline bool Summary::_internal_has_sample_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Summary::has_sample_count() const {
  return _internal_has_sample_count();
}
inline void Summary::clear_sample_count() {
  sample_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_sample_count() const {
  return sample_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::sample_count() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Summary.sample_count)
  return _internal_sample_count();
}
inline void Summary::_internal_set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sample_count_ = value;
}
inline void Summary::set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sample_count(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Summary.sample_count)
}

// optional double sample_sum = 2;
inline bool Summary::_internal_has_sample_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Summary::has_sample_sum() const {
  return _internal_has_sample_sum();
}
inline void Summary::clear_sample_sum() {
  sample_sum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Summary::_internal_sample_sum() const {
  return sample_sum_;
}
inline double Summary::sample_sum() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Summary.sample_sum)
  return _internal_sample_sum();
}
inline void Summary::_internal_set_sample_sum(double value) {
  _has_bits_[0] |= 0x00000002u;
  sample_sum_ = value;
}
inline void Summary::set_sample_sum(double value) {
  _internal_set_sample_sum(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Summary.sample_sum)
}

// repeated .io.prometheus.client.Quantile quantile = 3;
inline int Summary::_internal_quantile_size() const {
  return quantile_.size();
}
inline int Summary::quantile_size() const {
  return _internal_quantile_size();
}
inline void Summary::clear_quantile() {
  quantile_.Clear();
}
inline ::io::prometheus::client::Quantile* Summary::mutable_quantile(int index) {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Summary.quantile)
  return quantile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Quantile >*
Summary::mutable_quantile() {
  // @@protoc_insertion_point(field_mutable_list:io.prometheus.client.Summary.quantile)
  return &quantile_;
}
inline const ::io::prometheus::client::Quantile& Summary::_internal_quantile(int index) const {
  return quantile_.Get(index);
}
inline const ::io::prometheus::client::Quantile& Summary::quantile(int index) const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Summary.quantile)
  return _internal_quantile(index);
}
inline ::io::prometheus::client::Quantile* Summary::_internal_add_quantile() {
  return quantile_.Add();
}
inline ::io::prometheus::client::Quantile* Summary::add_quantile() {
  // @@protoc_insertion_point(field_add:io.prometheus.client.Summary.quantile)
  return _internal_add_quantile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Quantile >&
Summary::quantile() const {
  // @@protoc_insertion_point(field_list:io.prometheus.client.Summary.quantile)
  return quantile_;
}

// -------------------------------------------------------------------

// Untyped

// optional double value = 1;
inline bool Untyped::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Untyped::has_value() const {
  return _internal_has_value();
}
inline void Untyped::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Untyped::_internal_value() const {
  return value_;
}
inline double Untyped::value() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Untyped.value)
  return _internal_value();
}
inline void Untyped::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Untyped::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Untyped.value)
}

// -------------------------------------------------------------------

// Histogram

// optional uint64 sample_count = 1;
inline bool Histogram::_internal_has_sample_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Histogram::has_sample_count() const {
  return _internal_has_sample_count();
}
inline void Histogram::clear_sample_count() {
  sample_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_sample_count() const {
  return sample_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::sample_count() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Histogram.sample_count)
  return _internal_sample_count();
}
inline void Histogram::_internal_set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sample_count_ = value;
}
inline void Histogram::set_sample_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sample_count(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Histogram.sample_count)
}

// optional double sample_sum = 2;
inline bool Histogram::_internal_has_sample_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Histogram::has_sample_sum() const {
  return _internal_has_sample_sum();
}
inline void Histogram::clear_sample_sum() {
  sample_sum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Histogram::_internal_sample_sum() const {
  return sample_sum_;
}
inline double Histogram::sample_sum() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Histogram.sample_sum)
  return _internal_sample_sum();
}
inline void Histogram::_internal_set_sample_sum(double value) {
  _has_bits_[0] |= 0x00000002u;
  sample_sum_ = value;
}
inline void Histogram::set_sample_sum(double value) {
  _internal_set_sample_sum(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Histogram.sample_sum)
}

// repeated .io.prometheus.client.Bucket bucket = 3;
inline int Histogram::_internal_bucket_size() const {
  return bucket_.size();
}
inline int Histogram::bucket_size() const {
  return _internal_bucket_size();
}
inline void Histogram::clear_bucket() {
  bucket_.Clear();
}
inline ::io::prometheus::client::Bucket* Histogram::mutable_bucket(int index) {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Histogram.bucket)
  return bucket_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Bucket >*
Histogram::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:io.prometheus.client.Histogram.bucket)
  return &bucket_;
}
inline const ::io::prometheus::client::Bucket& Histogram::_internal_bucket(int index) const {
  return bucket_.Get(index);
}
inline const ::io::prometheus::client::Bucket& Histogram::bucket(int index) const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Histogram.bucket)
  return _internal_bucket(index);
}
inline ::io::prometheus::client::Bucket* Histogram::_internal_add_bucket() {
  return bucket_.Add();
}
inline ::io::prometheus::client::Bucket* Histogram::add_bucket() {
  // @@protoc_insertion_point(field_add:io.prometheus.client.Histogram.bucket)
  return _internal_add_bucket();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Bucket >&
Histogram::bucket() const {
  // @@protoc_insertion_point(field_list:io.prometheus.client.Histogram.bucket)
  return bucket_;
}

// -------------------------------------------------------------------

// Bucket

// optional uint64 cumulative_count = 1;
inline bool Bucket::_internal_has_cumulative_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bucket::has_cumulative_count() const {
  return _internal_has_cumulative_count();
}
inline void Bucket::clear_cumulative_count() {
  cumulative_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bucket::_internal_cumulative_count() const {
  return cumulative_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bucket::cumulative_count() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Bucket.cumulative_count)
  return _internal_cumulative_count();
}
inline void Bucket::_internal_set_cumulative_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  cumulative_count_ = value;
}
inline void Bucket::set_cumulative_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cumulative_count(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Bucket.cumulative_count)
}

// optional double upper_bound = 2;
inline bool Bucket::_internal_has_upper_bound() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bucket::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void Bucket::clear_upper_bound() {
  upper_bound_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Bucket::_internal_upper_bound() const {
  return upper_bound_;
}
inline double Bucket::upper_bound() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Bucket.upper_bound)
  return _internal_upper_bound();
}
inline void Bucket::_internal_set_upper_bound(double value) {
  _has_bits_[0] |= 0x00000002u;
  upper_bound_ = value;
}
inline void Bucket::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Bucket.upper_bound)
}

// -------------------------------------------------------------------

// Metric

// repeated .io.prometheus.client.LabelPair label = 1;
inline int Metric::_internal_label_size() const {
  return label_.size();
}
inline int Metric::label_size() const {
  return _internal_label_size();
}
inline void Metric::clear_label() {
  label_.Clear();
}
inline ::io::prometheus::client::LabelPair* Metric::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.label)
  return label_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::LabelPair >*
Metric::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:io.prometheus.client.Metric.label)
  return &label_;
}
inline const ::io::prometheus::client::LabelPair& Metric::_internal_label(int index) const {
  return label_.Get(index);
}
inline const ::io::prometheus::client::LabelPair& Metric::label(int index) const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.label)
  return _internal_label(index);
}
inline ::io::prometheus::client::LabelPair* Metric::_internal_add_label() {
  return label_.Add();
}
inline ::io::prometheus::client::LabelPair* Metric::add_label() {
  // @@protoc_insertion_point(field_add:io.prometheus.client.Metric.label)
  return _internal_add_label();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::LabelPair >&
Metric::label() const {
  // @@protoc_insertion_point(field_list:io.prometheus.client.Metric.label)
  return label_;
}

// optional .io.prometheus.client.Gauge gauge = 2;
inline bool Metric::_internal_has_gauge() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gauge_ != nullptr);
  return value;
}
inline bool Metric::has_gauge() const {
  return _internal_has_gauge();
}
inline void Metric::clear_gauge() {
  if (gauge_ != nullptr) gauge_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::io::prometheus::client::Gauge& Metric::_internal_gauge() const {
  const ::io::prometheus::client::Gauge* p = gauge_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::prometheus::client::Gauge&>(
      ::io::prometheus::client::_Gauge_default_instance_);
}
inline const ::io::prometheus::client::Gauge& Metric::gauge() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.gauge)
  return _internal_gauge();
}
inline void Metric::unsafe_arena_set_allocated_gauge(
    ::io::prometheus::client::Gauge* gauge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gauge_);
  }
  gauge_ = gauge;
  if (gauge) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.prometheus.client.Metric.gauge)
}
inline ::io::prometheus::client::Gauge* Metric::release_gauge() {
  _has_bits_[0] &= ~0x00000001u;
  ::io::prometheus::client::Gauge* temp = gauge_;
  gauge_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::detail::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::prometheus::client::Gauge* Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.Metric.gauge)
  _has_bits_[0] &= ~0x00000001u;
  ::io::prometheus::client::Gauge* temp = gauge_;
  gauge_ = nullptr;
  return temp;
}
inline ::io::prometheus::client::Gauge* Metric::_internal_mutable_gauge() {
  _has_bits_[0] |= 0x00000001u;
  if (gauge_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::prometheus::client::Gauge>(GetArena());
    gauge_ = p;
  }
  return gauge_;
}
inline ::io::prometheus::client::Gauge* Metric::mutable_gauge() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.gauge)
  return _internal_mutable_gauge();
}
inline void Metric::set_allocated_gauge(::io::prometheus::client::Gauge* gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gauge_;
  }
  if (gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gauge);
    if (message_arena != submessage_arena) {
      gauge = ::PROTOBUF_NAMESPACE_ID::detail::GetOwnedMessage(
          message_arena, gauge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gauge_ = gauge;
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.Metric.gauge)
}

// optional .io.prometheus.client.Counter counter = 3;
inline bool Metric::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || counter_ != nullptr);
  return value;
}
inline bool Metric::has_counter() const {
  return _internal_has_counter();
}
inline void Metric::clear_counter() {
  if (counter_ != nullptr) counter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::io::prometheus::client::Counter& Metric::_internal_counter() const {
  const ::io::prometheus::client::Counter* p = counter_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::prometheus::client::Counter&>(
      ::io::prometheus::client::_Counter_default_instance_);
}
inline const ::io::prometheus::client::Counter& Metric::counter() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.counter)
  return _internal_counter();
}
inline void Metric::unsafe_arena_set_allocated_counter(
    ::io::prometheus::client::Counter* counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_);
  }
  counter_ = counter;
  if (counter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.prometheus.client.Metric.counter)
}
inline ::io::prometheus::client::Counter* Metric::release_counter() {
  _has_bits_[0] &= ~0x00000002u;
  ::io::prometheus::client::Counter* temp = counter_;
  counter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::detail::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::prometheus::client::Counter* Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.Metric.counter)
  _has_bits_[0] &= ~0x00000002u;
  ::io::prometheus::client::Counter* temp = counter_;
  counter_ = nullptr;
  return temp;
}
inline ::io::prometheus::client::Counter* Metric::_internal_mutable_counter() {
  _has_bits_[0] |= 0x00000002u;
  if (counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::prometheus::client::Counter>(GetArena());
    counter_ = p;
  }
  return counter_;
}
inline ::io::prometheus::client::Counter* Metric::mutable_counter() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.counter)
  return _internal_mutable_counter();
}
inline void Metric::set_allocated_counter(::io::prometheus::client::Counter* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete counter_;
  }
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(counter);
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::detail::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  counter_ = counter;
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.Metric.counter)
}

// optional .io.prometheus.client.Summary summary = 4;
inline bool Metric::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool Metric::has_summary() const {
  return _internal_has_summary();
}
inline void Metric::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::io::prometheus::client::Summary& Metric::_internal_summary() const {
  const ::io::prometheus::client::Summary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::prometheus::client::Summary&>(
      ::io::prometheus::client::_Summary_default_instance_);
}
inline const ::io::prometheus::client::Summary& Metric::summary() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.summary)
  return _internal_summary();
}
inline void Metric::unsafe_arena_set_allocated_summary(
    ::io::prometheus::client::Summary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.prometheus.client.Metric.summary)
}
inline ::io::prometheus::client::Summary* Metric::release_summary() {
  _has_bits_[0] &= ~0x00000004u;
  ::io::prometheus::client::Summary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::detail::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::prometheus::client::Summary* Metric::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.Metric.summary)
  _has_bits_[0] &= ~0x00000004u;
  ::io::prometheus::client::Summary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::io::prometheus::client::Summary* Metric::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000004u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::prometheus::client::Summary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::io::prometheus::client::Summary* Metric::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.summary)
  return _internal_mutable_summary();
}
inline void Metric::set_allocated_summary(::io::prometheus::client::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::detail::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.Metric.summary)
}

// optional .io.prometheus.client.Untyped untyped = 5;
inline bool Metric::_internal_has_untyped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || untyped_ != nullptr);
  return value;
}
inline bool Metric::has_untyped() const {
  return _internal_has_untyped();
}
inline void Metric::clear_untyped() {
  if (untyped_ != nullptr) untyped_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::io::prometheus::client::Untyped& Metric::_internal_untyped() const {
  const ::io::prometheus::client::Untyped* p = untyped_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::prometheus::client::Untyped&>(
      ::io::prometheus::client::_Untyped_default_instance_);
}
inline const ::io::prometheus::client::Untyped& Metric::untyped() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.untyped)
  return _internal_untyped();
}
inline void Metric::unsafe_arena_set_allocated_untyped(
    ::io::prometheus::client::Untyped* untyped) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(untyped_);
  }
  untyped_ = untyped;
  if (untyped) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.prometheus.client.Metric.untyped)
}
inline ::io::prometheus::client::Untyped* Metric::release_untyped() {
  _has_bits_[0] &= ~0x00000008u;
  ::io::prometheus::client::Untyped* temp = untyped_;
  untyped_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::detail::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::prometheus::client::Untyped* Metric::unsafe_arena_release_untyped() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.Metric.untyped)
  _has_bits_[0] &= ~0x00000008u;
  ::io::prometheus::client::Untyped* temp = untyped_;
  untyped_ = nullptr;
  return temp;
}
inline ::io::prometheus::client::Untyped* Metric::_internal_mutable_untyped() {
  _has_bits_[0] |= 0x00000008u;
  if (untyped_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::prometheus::client::Untyped>(GetArena());
    untyped_ = p;
  }
  return untyped_;
}
inline ::io::prometheus::client::Untyped* Metric::mutable_untyped() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.untyped)
  return _internal_mutable_untyped();
}
inline void Metric::set_allocated_untyped(::io::prometheus::client::Untyped* untyped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete untyped_;
  }
  if (untyped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(untyped);
    if (message_arena != submessage_arena) {
      untyped = ::PROTOBUF_NAMESPACE_ID::detail::GetOwnedMessage(
          message_arena, untyped, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  untyped_ = untyped;
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.Metric.untyped)
}

// optional .io.prometheus.client.Histogram histogram = 7;
inline bool Metric::_internal_has_histogram() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || histogram_ != nullptr);
  return value;
}
inline bool Metric::has_histogram() const {
  return _internal_has_histogram();
}
inline void Metric::clear_histogram() {
  if (histogram_ != nullptr) histogram_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::io::prometheus::client::Histogram& Metric::_internal_histogram() const {
  const ::io::prometheus::client::Histogram* p = histogram_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::prometheus::client::Histogram&>(
      ::io::prometheus::client::_Histogram_default_instance_);
}
inline const ::io::prometheus::client::Histogram& Metric::histogram() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.histogram)
  return _internal_histogram();
}
inline void Metric::unsafe_arena_set_allocated_histogram(
    ::io::prometheus::client::Histogram* histogram) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogram_);
  }
  histogram_ = histogram;
  if (histogram) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.prometheus.client.Metric.histogram)
}
inline ::io::prometheus::client::Histogram* Metric::release_histogram() {
  _has_bits_[0] &= ~0x00000010u;
  ::io::prometheus::client::Histogram* temp = histogram_;
  histogram_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::detail::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::prometheus::client::Histogram* Metric::unsafe_arena_release_histogram() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.Metric.histogram)
  _has_bits_[0] &= ~0x00000010u;
  ::io::prometheus::client::Histogram* temp = histogram_;
  histogram_ = nullptr;
  return temp;
}
inline ::io::prometheus::client::Histogram* Metric::_internal_mutable_histogram() {
  _has_bits_[0] |= 0x00000010u;
  if (histogram_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::prometheus::client::Histogram>(GetArena());
    histogram_ = p;
  }
  return histogram_;
}
inline ::io::prometheus::client::Histogram* Metric::mutable_histogram() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.Metric.histogram)
  return _internal_mutable_histogram();
}
inline void Metric::set_allocated_histogram(::io::prometheus::client::Histogram* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete histogram_;
  }
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histogram);
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::detail::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  histogram_ = histogram;
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.Metric.histogram)
}

// optional int64 timestamp_ms = 6;
inline bool Metric::_internal_has_timestamp_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metric::has_timestamp_ms() const {
  return _internal_has_timestamp_ms();
}
inline void Metric::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metric::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metric::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.Metric.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void Metric::_internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ms_ = value;
}
inline void Metric::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.Metric.timestamp_ms)
}

// -------------------------------------------------------------------

// MetricFamily

// optional string name = 1;
inline bool MetricFamily::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetricFamily::has_name() const {
  return _internal_has_name();
}
inline void MetricFamily::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetricFamily::name() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.MetricFamily.name)
  return _internal_name();
}
inline void MetricFamily::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.MetricFamily.name)
}
inline std::string* MetricFamily::mutable_name() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.MetricFamily.name)
  return _internal_mutable_name();
}
inline const std::string& MetricFamily::_internal_name() const {
  return name_.Get();
}
inline void MetricFamily::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetricFamily::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.prometheus.client.MetricFamily.name)
}
inline void MetricFamily::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.prometheus.client.MetricFamily.name)
}
inline void MetricFamily::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.prometheus.client.MetricFamily.name)
}
inline std::string* MetricFamily::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetricFamily::release_name() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.MetricFamily.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetricFamily::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.MetricFamily.name)
}

// optional string help = 2;
inline bool MetricFamily::_internal_has_help() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetricFamily::has_help() const {
  return _internal_has_help();
}
inline void MetricFamily::clear_help() {
  help_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetricFamily::help() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.MetricFamily.help)
  return _internal_help();
}
inline void MetricFamily::set_help(const std::string& value) {
  _internal_set_help(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.MetricFamily.help)
}
inline std::string* MetricFamily::mutable_help() {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.MetricFamily.help)
  return _internal_mutable_help();
}
inline const std::string& MetricFamily::_internal_help() const {
  return help_.Get();
}
inline void MetricFamily::_internal_set_help(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  help_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetricFamily::set_help(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  help_.Set(
    ::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.prometheus.client.MetricFamily.help)
}
inline void MetricFamily::set_help(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  help_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.prometheus.client.MetricFamily.help)
}
inline void MetricFamily::set_help(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  help_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.prometheus.client.MetricFamily.help)
}
inline std::string* MetricFamily::_internal_mutable_help() {
  _has_bits_[0] |= 0x00000002u;
  return help_.Mutable(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetricFamily::release_help() {
  // @@protoc_insertion_point(field_release:io.prometheus.client.MetricFamily.help)
  if (!_internal_has_help()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return help_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetricFamily::set_allocated_help(std::string* help) {
  if (help != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  help_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), help,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.prometheus.client.MetricFamily.help)
}

// optional .io.prometheus.client.MetricType type = 3;
inline bool MetricFamily::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MetricFamily::has_type() const {
  return _internal_has_type();
}
inline void MetricFamily::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::io::prometheus::client::MetricType MetricFamily::_internal_type() const {
  return static_cast< ::io::prometheus::client::MetricType >(type_);
}
inline ::io::prometheus::client::MetricType MetricFamily::type() const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.MetricFamily.type)
  return _internal_type();
}
inline void MetricFamily::_internal_set_type(::io::prometheus::client::MetricType value) {
  assert(::io::prometheus::client::MetricType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void MetricFamily::set_type(::io::prometheus::client::MetricType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:io.prometheus.client.MetricFamily.type)
}

// repeated .io.prometheus.client.Metric metric = 4;
inline int MetricFamily::_internal_metric_size() const {
  return metric_.size();
}
inline int MetricFamily::metric_size() const {
  return _internal_metric_size();
}
inline void MetricFamily::clear_metric() {
  metric_.Clear();
}
inline ::io::prometheus::client::Metric* MetricFamily::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:io.prometheus.client.MetricFamily.metric)
  return metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Metric >*
MetricFamily::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:io.prometheus.client.MetricFamily.metric)
  return &metric_;
}
inline const ::io::prometheus::client::Metric& MetricFamily::_internal_metric(int index) const {
  return metric_.Get(index);
}
inline const ::io::prometheus::client::Metric& MetricFamily::metric(int index) const {
  // @@protoc_insertion_point(field_get:io.prometheus.client.MetricFamily.metric)
  return _internal_metric(index);
}
inline ::io::prometheus::client::Metric* MetricFamily::_internal_add_metric() {
  return metric_.Add();
}
inline ::io::prometheus::client::Metric* MetricFamily::add_metric() {
  // @@protoc_insertion_point(field_add:io.prometheus.client.MetricFamily.metric)
  return _internal_add_metric();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::prometheus::client::Metric >&
MetricFamily::metric() const {
  // @@protoc_insertion_point(field_list:io.prometheus.client.MetricFamily.metric)
  return metric_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace prometheus
}  // namespace io

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::io::prometheus::client::MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::prometheus::client::MetricType>() {
  return ::io::prometheus::client::MetricType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics2_2eproto
