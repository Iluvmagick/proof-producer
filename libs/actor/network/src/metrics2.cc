// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics2.proto

#include "metrics2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Bucket_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Counter_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Gauge_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<1> scc_info_Histogram_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_LabelPair_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<6> scc_info_Metric_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Quantile_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<1> scc_info_Summary_metrics2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics2_2eproto ::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Untyped_metrics2_2eproto;
namespace io {
namespace prometheus {
namespace client {
class LabelPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<LabelPair> _instance;
} _LabelPair_default_instance_;
class GaugeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Gauge> _instance;
} _Gauge_default_instance_;
class CounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Counter> _instance;
} _Counter_default_instance_;
class QuantileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Quantile> _instance;
} _Quantile_default_instance_;
class SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Summary> _instance;
} _Summary_default_instance_;
class UntypedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Untyped> _instance;
} _Untyped_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Histogram> _instance;
} _Histogram_default_instance_;
class BucketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Bucket> _instance;
} _Bucket_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
class MetricFamilyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::detail::ExplicitlyConstructed<MetricFamily> _instance;
} _MetricFamily_default_instance_;
}  // namespace client
}  // namespace prometheus
}  // namespace io
static void InitDefaultsscc_info_Bucket_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Bucket_default_instance_;
    new (ptr) ::io::prometheus::client::Bucket();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Bucket_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bucket_metrics2_2eproto}, {}};

static void InitDefaultsscc_info_Counter_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Counter_default_instance_;
    new (ptr) ::io::prometheus::client::Counter();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Counter_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Counter_metrics2_2eproto}, {}};

static void InitDefaultsscc_info_Gauge_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Gauge_default_instance_;
    new (ptr) ::io::prometheus::client::Gauge();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Gauge_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gauge_metrics2_2eproto}, {}};

static void InitDefaultsscc_info_Histogram_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Histogram_default_instance_;
    new (ptr) ::io::prometheus::client::Histogram();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<1> scc_info_Histogram_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Histogram_metrics2_2eproto}, {
      &scc_info_Bucket_metrics2_2eproto.base,}};

static void InitDefaultsscc_info_LabelPair_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_LabelPair_default_instance_;
    new (ptr) ::io::prometheus::client::LabelPair();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_LabelPair_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelPair_metrics2_2eproto}, {}};

static void InitDefaultsscc_info_Metric_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Metric_default_instance_;
    new (ptr) ::io::prometheus::client::Metric();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<6> scc_info_Metric_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Metric_metrics2_2eproto}, {
      &scc_info_LabelPair_metrics2_2eproto.base,
      &scc_info_Gauge_metrics2_2eproto.base,
      &scc_info_Counter_metrics2_2eproto.base,
      &scc_info_Summary_metrics2_2eproto.base,
      &scc_info_Untyped_metrics2_2eproto.base,
      &scc_info_Histogram_metrics2_2eproto.base,}};

static void InitDefaultsscc_info_MetricFamily_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_MetricFamily_default_instance_;
    new (ptr) ::io::prometheus::client::MetricFamily();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<1> scc_info_MetricFamily_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetricFamily_metrics2_2eproto}, {
      &scc_info_Metric_metrics2_2eproto.base,}};

static void InitDefaultsscc_info_Quantile_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Quantile_default_instance_;
    new (ptr) ::io::prometheus::client::Quantile();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Quantile_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quantile_metrics2_2eproto}, {}};

static void InitDefaultsscc_info_Summary_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Summary_default_instance_;
    new (ptr) ::io::prometheus::client::Summary();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<1> scc_info_Summary_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Summary_metrics2_2eproto}, {
      &scc_info_Quantile_metrics2_2eproto.base,}};

static void InitDefaultsscc_info_Untyped_metrics2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::prometheus::client::_Untyped_default_instance_;
    new (ptr) ::io::prometheus::client::Untyped();
    ::PROTOBUF_NAMESPACE_ID::detail::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::detail::SCCInfo<0> scc_info_Untyped_metrics2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Untyped_metrics2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metrics2_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_metrics2_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metrics2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metrics2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::LabelPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::LabelPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::LabelPair, name_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::LabelPair, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Gauge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Gauge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Gauge, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Counter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Counter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Counter, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Quantile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Quantile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Quantile, quantile_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Quantile, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Summary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Summary, sample_count_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Summary, sample_sum_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Summary, quantile_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Untyped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Untyped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Untyped, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Histogram, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Histogram, sample_count_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Histogram, sample_sum_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Histogram, bucket_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Bucket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Bucket, cumulative_count_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Bucket, upper_bound_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, label_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, gauge_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, counter_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, summary_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, untyped_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, histogram_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::Metric, timestamp_ms_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, name_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, help_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, type_),
  PROTOBUF_FIELD_OFFSET(::io::prometheus::client::MetricFamily, metric_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::detail::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::io::prometheus::client::LabelPair)},
  { 9, 15, sizeof(::io::prometheus::client::Gauge)},
  { 16, 22, sizeof(::io::prometheus::client::Counter)},
  { 23, 30, sizeof(::io::prometheus::client::Quantile)},
  { 32, 40, sizeof(::io::prometheus::client::Summary)},
  { 43, 49, sizeof(::io::prometheus::client::Untyped)},
  { 50, 58, sizeof(::io::prometheus::client::Histogram)},
  { 61, 68, sizeof(::io::prometheus::client::Bucket)},
  { 70, 82, sizeof(::io::prometheus::client::Metric)},
  { 89, 98, sizeof(::io::prometheus::client::MetricFamily)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_LabelPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Gauge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Counter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Quantile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Untyped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Histogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Bucket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::prometheus::client::_MetricFamily_default_instance_),
};

const char descriptor_table_protodef_metrics2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016metrics2.proto\022\024io.prometheus.client\"("
  "\n\tLabelPair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  "\"\026\n\005Gauge\022\r\n\005value\030\001 \001(\001\"\030\n\007Counter\022\r\n\005v"
  "alue\030\001 \001(\001\"+\n\010Quantile\022\020\n\010quantile\030\001 \001(\001"
  "\022\r\n\005value\030\002 \001(\001\"e\n\007Summary\022\024\n\014sample_cou"
  "nt\030\001 \001(\004\022\022\n\nsample_sum\030\002 \001(\001\0220\n\010quantile"
  "\030\003 \003(\0132\036.io.prometheus.client.Quantile\"\030"
  "\n\007Untyped\022\r\n\005value\030\001 \001(\001\"c\n\tHistogram\022\024\n"
  "\014sample_count\030\001 \001(\004\022\022\n\nsample_sum\030\002 \001(\001\022"
  ",\n\006bucket\030\003 \003(\0132\034.io.prometheus.client.B"
  "ucket\"7\n\006Bucket\022\030\n\020cumulative_count\030\001 \001("
  "\004\022\023\n\013upper_bound\030\002 \001(\001\"\276\002\n\006Metric\022.\n\005lab"
  "el\030\001 \003(\0132\037.io.prometheus.client.LabelPai"
  "r\022*\n\005gauge\030\002 \001(\0132\033.io.prometheus.client."
  "Gauge\022.\n\007counter\030\003 \001(\0132\035.io.prometheus.c"
  "lient.Counter\022.\n\007summary\030\004 \001(\0132\035.io.prom"
  "etheus.client.Summary\022.\n\007untyped\030\005 \001(\0132\035"
  ".io.prometheus.client.Untyped\0222\n\thistogr"
  "am\030\007 \001(\0132\037.io.prometheus.client.Histogra"
  "m\022\024\n\014timestamp_ms\030\006 \001(\003\"\210\001\n\014MetricFamily"
  "\022\014\n\004name\030\001 \001(\t\022\014\n\004help\030\002 \001(\t\022.\n\004type\030\003 \001"
  "(\0162 .io.prometheus.client.MetricType\022,\n\006"
  "metric\030\004 \003(\0132\034.io.prometheus.client.Metr"
  "ic*M\n\nMetricType\022\013\n\007COUNTER\020\000\022\t\n\005GAUGE\020\001"
  "\022\013\n\007SUMMARY\020\002\022\013\n\007UNTYPED\020\003\022\r\n\tHISTOGRAM\020"
  "\004B\026\n\024io.prometheus.client"
  ;
static const ::PROTOBUF_NAMESPACE_ID::detail::DescriptorTable*const descriptor_table_metrics2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::detail::SCCInfoBase*const descriptor_table_metrics2_2eproto_sccs[10] = {
  &scc_info_Bucket_metrics2_2eproto.base,
  &scc_info_Counter_metrics2_2eproto.base,
  &scc_info_Gauge_metrics2_2eproto.base,
  &scc_info_Histogram_metrics2_2eproto.base,
  &scc_info_LabelPair_metrics2_2eproto.base,
  &scc_info_Metric_metrics2_2eproto.base,
  &scc_info_MetricFamily_metrics2_2eproto.base,
  &scc_info_Quantile_metrics2_2eproto.base,
  &scc_info_Summary_metrics2_2eproto.base,
  &scc_info_Untyped_metrics2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::detail::once_flag descriptor_table_metrics2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::detail::DescriptorTable descriptor_table_metrics2_2eproto = {
  false, false, descriptor_table_protodef_metrics2_2eproto, "metrics2.proto", 1025,
  &descriptor_table_metrics2_2eproto_once, descriptor_table_metrics2_2eproto_sccs, descriptor_table_metrics2_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_metrics2_2eproto::offsets,
  file_level_metadata_metrics2_2eproto, 10, file_level_enum_descriptors_metrics2_2eproto, file_level_service_descriptors_metrics2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_metrics2_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::detail::AddDescriptors(&descriptor_table_metrics2_2eproto)), true);
namespace io {
namespace prometheus {
namespace client {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::detail::AssignDescriptors(&descriptor_table_metrics2_2eproto);
  return file_level_enum_descriptors_metrics2_2eproto[0];
}
bool MetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LabelPair::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelPair>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LabelPair::LabelPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.LabelPair)
}
LabelPair::LabelPair(const LabelPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.LabelPair)
}

void LabelPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&scc_info_LabelPair_metrics2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
}

LabelPair::~LabelPair() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.LabelPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
}

void LabelPair::ArenaDtor(void* object) {
  LabelPair* _this = reinterpret_cast< LabelPair* >(object);
  (void)_this;
}
void LabelPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelPair& LabelPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_LabelPair_metrics2_2eproto.base);
  return *internal_default_instance();
}


void LabelPair::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.LabelPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::detail::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::detail::VerifyUTF8(str, "io.prometheus.client.LabelPair.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::detail::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::detail::VerifyUTF8(str, "io.prometheus.client.LabelPair.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.LabelPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::SERIALIZE,
      "io.prometheus.client.LabelPair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::SERIALIZE,
      "io.prometheus.client.LabelPair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.LabelPair)
  return target;
}

size_t LabelPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.LabelPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.LabelPair)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.LabelPair)
    MergeFrom(*source);
  }
}

void LabelPair::MergeFrom(const LabelPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void LabelPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelPair::CopyFrom(const LabelPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelPair::IsInitialized() const {
  return true;
}

void LabelPair::InternalSwap(LabelPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Gauge::_Internal {
 public:
  using HasBits = decltype(std::declval<Gauge>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gauge::Gauge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Gauge)
}
Gauge::Gauge(const Gauge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Gauge)
}

void Gauge::SharedCtor() {
  value_ = 0;
}

Gauge::~Gauge() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Gauge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gauge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Gauge::ArenaDtor(void* object) {
  Gauge* _this = reinterpret_cast< Gauge* >(object);
  (void)_this;
}
void Gauge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gauge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gauge& Gauge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Gauge_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Gauge::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Gauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gauge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gauge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Gauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Gauge)
  return target;
}

size_t Gauge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Gauge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gauge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Gauge)
  GOOGLE_DCHECK_NE(&from, this);
  const Gauge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gauge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Gauge)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Gauge)
    MergeFrom(*source);
  }
}

void Gauge::MergeFrom(const Gauge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Gauge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void Gauge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Gauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gauge::CopyFrom(const Gauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Gauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gauge::IsInitialized() const {
  return true;
}

void Gauge::InternalSwap(Gauge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gauge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Counter::_Internal {
 public:
  using HasBits = decltype(std::declval<Counter>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Counter::Counter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Counter)
}
Counter::Counter(const Counter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Counter)
}

void Counter::SharedCtor() {
  value_ = 0;
}

Counter::~Counter() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Counter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Counter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Counter::ArenaDtor(void* object) {
  Counter* _this = reinterpret_cast< Counter* >(object);
  (void)_this;
}
void Counter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Counter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Counter& Counter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Counter_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Counter::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Counter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Counter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Counter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Counter)
  return target;
}

size_t Counter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Counter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Counter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Counter)
  GOOGLE_DCHECK_NE(&from, this);
  const Counter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Counter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Counter)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Counter)
    MergeFrom(*source);
  }
}

void Counter::MergeFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Counter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void Counter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Counter::CopyFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counter::IsInitialized() const {
  return true;
}

void Counter::InternalSwap(Counter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Counter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quantile::_Internal {
 public:
  using HasBits = decltype(std::declval<Quantile>()._has_bits_);
  static void set_has_quantile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Quantile::Quantile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Quantile)
}
Quantile::Quantile(const Quantile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quantile_, &from.quantile_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Quantile)
}

void Quantile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&quantile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
}

Quantile::~Quantile() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Quantile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quantile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quantile::ArenaDtor(void* object) {
  Quantile* _this = reinterpret_cast< Quantile* >(object);
  (void)_this;
}
void Quantile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quantile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quantile& Quantile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Quantile_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Quantile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Quantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&quantile_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quantile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double quantile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_quantile(&has_bits);
          quantile_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quantile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Quantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double quantile = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(1, this->_internal_quantile(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Quantile)
  return target;
}

size_t Quantile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Quantile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double quantile = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quantile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Quantile)
  GOOGLE_DCHECK_NE(&from, this);
  const Quantile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quantile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Quantile)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Quantile)
    MergeFrom(*source);
  }
}

void Quantile::MergeFrom(const Quantile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Quantile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quantile_ = from.quantile_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quantile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Quantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quantile::CopyFrom(const Quantile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Quantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quantile::IsInitialized() const {
  return true;
}

void Quantile::InternalSwap(Quantile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::detail::memswap<
      PROTOBUF_FIELD_OFFSET(Quantile, value_)
      + sizeof(Quantile::value_)
      - PROTOBUF_FIELD_OFFSET(Quantile, quantile_)>(
          reinterpret_cast<char*>(&quantile_),
          reinterpret_cast<char*>(&other->quantile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quantile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Summary::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary>()._has_bits_);
  static void set_has_sample_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quantile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      quantile_(from.quantile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sample_count_, &from.sample_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_sum_) -
    reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Summary)
}

void Summary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&scc_info_Summary_metrics2_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sample_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sample_sum_) -
      reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary& Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Summary_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sample_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_sum_) -
        reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sample_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_count(&has_bits);
          sample_count_ = ::PROTOBUF_NAMESPACE_ID::detail::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double sample_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sample_sum(&has_bits);
          sample_sum_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .io.prometheus.client.Quantile quantile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::detail::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sample_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sample_count(), target);
  }

  // optional double sample_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(2, this->_internal_sample_sum(), target);
  }

  // repeated .io.prometheus.client.Quantile quantile = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(3, this->_internal_quantile(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.prometheus.client.Quantile quantile = 3;
  total_size += 1UL * this->_internal_quantile_size();
  for (const auto& msg : this->quantile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 sample_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::UInt64Size(
          this->_internal_sample_count());
    }

    // optional double sample_sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Summary)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantile_.MergeFrom(from.quantile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sample_count_ = from.sample_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      sample_sum_ = from.sample_sum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quantile_.InternalSwap(&other->quantile_);
  ::PROTOBUF_NAMESPACE_ID::detail::memswap<
      PROTOBUF_FIELD_OFFSET(Summary, sample_sum_)
      + sizeof(Summary::sample_sum_)
      - PROTOBUF_FIELD_OFFSET(Summary, sample_count_)>(
          reinterpret_cast<char*>(&sample_count_),
          reinterpret_cast<char*>(&other->sample_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Untyped::_Internal {
 public:
  using HasBits = decltype(std::declval<Untyped>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Untyped::Untyped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Untyped)
}
Untyped::Untyped(const Untyped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Untyped)
}

void Untyped::SharedCtor() {
  value_ = 0;
}

Untyped::~Untyped() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Untyped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Untyped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Untyped::ArenaDtor(void* object) {
  Untyped* _this = reinterpret_cast< Untyped* >(object);
  (void)_this;
}
void Untyped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Untyped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Untyped& Untyped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Untyped_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Untyped::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Untyped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Untyped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Untyped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Untyped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Untyped)
  return target;
}

size_t Untyped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Untyped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Untyped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Untyped)
  GOOGLE_DCHECK_NE(&from, this);
  const Untyped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Untyped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Untyped)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Untyped)
    MergeFrom(*source);
  }
}

void Untyped::MergeFrom(const Untyped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Untyped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void Untyped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Untyped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Untyped::CopyFrom(const Untyped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Untyped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Untyped::IsInitialized() const {
  return true;
}

void Untyped::InternalSwap(Untyped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Untyped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Histogram::_Internal {
 public:
  using HasBits = decltype(std::declval<Histogram>()._has_bits_);
  static void set_has_sample_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Histogram::Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bucket_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sample_count_, &from.sample_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_sum_) -
    reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Histogram)
}

void Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&scc_info_Histogram_metrics2_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sample_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sample_sum_) -
      reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Histogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Histogram::ArenaDtor(void* object) {
  Histogram* _this = reinterpret_cast< Histogram* >(object);
  (void)_this;
}
void Histogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Histogram& Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Histogram_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sample_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_sum_) -
        reinterpret_cast<char*>(&sample_count_)) + sizeof(sample_sum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sample_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_count(&has_bits);
          sample_count_ = ::PROTOBUF_NAMESPACE_ID::detail::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double sample_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sample_sum(&has_bits);
          sample_sum_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .io.prometheus.client.Bucket bucket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bucket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::detail::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Histogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sample_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sample_count(), target);
  }

  // optional double sample_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(2, this->_internal_sample_sum(), target);
  }

  // repeated .io.prometheus.client.Bucket bucket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bucket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bucket(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.prometheus.client.Bucket bucket = 3;
  total_size += 1UL * this->_internal_bucket_size();
  for (const auto& msg : this->bucket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 sample_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::UInt64Size(
          this->_internal_sample_count());
    }

    // optional double sample_sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Histogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Histogram)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_.MergeFrom(from.bucket_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sample_count_ = from.sample_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      sample_sum_ = from.sample_sum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Histogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bucket_.InternalSwap(&other->bucket_);
  ::PROTOBUF_NAMESPACE_ID::detail::memswap<
      PROTOBUF_FIELD_OFFSET(Histogram, sample_sum_)
      + sizeof(Histogram::sample_sum_)
      - PROTOBUF_FIELD_OFFSET(Histogram, sample_count_)>(
          reinterpret_cast<char*>(&sample_count_),
          reinterpret_cast<char*>(&other->sample_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Histogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bucket::_Internal {
 public:
  using HasBits = decltype(std::declval<Bucket>()._has_bits_);
  static void set_has_cumulative_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Bucket::Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Bucket)
}
Bucket::Bucket(const Bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cumulative_count_, &from.cumulative_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bound_) -
    reinterpret_cast<char*>(&cumulative_count_)) + sizeof(upper_bound_));
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Bucket)
}

void Bucket::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cumulative_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&upper_bound_) -
      reinterpret_cast<char*>(&cumulative_count_)) + sizeof(upper_bound_));
}

Bucket::~Bucket() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Bucket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bucket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Bucket::ArenaDtor(void* object) {
  Bucket* _this = reinterpret_cast< Bucket* >(object);
  (void)_this;
}
void Bucket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bucket& Bucket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Bucket_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cumulative_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upper_bound_) -
        reinterpret_cast<char*>(&cumulative_count_)) + sizeof(upper_bound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 cumulative_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cumulative_count(&has_bits);
          cumulative_count_ = ::PROTOBUF_NAMESPACE_ID::detail::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double upper_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_upper_bound(&has_bits);
          upper_bound_ = ::PROTOBUF_NAMESPACE_ID::detail::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bucket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 cumulative_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cumulative_count(), target);
  }

  // optional double upper_bound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteDoubleToArray(2, this->_internal_upper_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Bucket)
  return target;
}

size_t Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Bucket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 cumulative_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::UInt64Size(
          this->_internal_cumulative_count());
    }

    // optional double upper_bound = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bucket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const Bucket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Bucket)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Bucket)
    MergeFrom(*source);
  }
}

void Bucket::MergeFrom(const Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cumulative_count_ = from.cumulative_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      upper_bound_ = from.upper_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bucket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bucket::CopyFrom(const Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket::IsInitialized() const {
  return true;
}

void Bucket::InternalSwap(Bucket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::detail::memswap<
      PROTOBUF_FIELD_OFFSET(Bucket, upper_bound_)
      + sizeof(Bucket::upper_bound_)
      - PROTOBUF_FIELD_OFFSET(Bucket, cumulative_count_)>(
          reinterpret_cast<char*>(&cumulative_count_),
          reinterpret_cast<char*>(&other->cumulative_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bucket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Metric>()._has_bits_);
  static const ::io::prometheus::client::Gauge& gauge(const Metric* msg);
  static void set_has_gauge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::prometheus::client::Counter& counter(const Metric* msg);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::prometheus::client::Summary& summary(const Metric* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::io::prometheus::client::Untyped& untyped(const Metric* msg);
  static void set_has_untyped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::io::prometheus::client::Histogram& histogram(const Metric* msg);
  static void set_has_histogram(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::io::prometheus::client::Gauge&
Metric::_Internal::gauge(const Metric* msg) {
  return *msg->gauge_;
}
const ::io::prometheus::client::Counter&
Metric::_Internal::counter(const Metric* msg) {
  return *msg->counter_;
}
const ::io::prometheus::client::Summary&
Metric::_Internal::summary(const Metric* msg) {
  return *msg->summary_;
}
const ::io::prometheus::client::Untyped&
Metric::_Internal::untyped(const Metric* msg) {
  return *msg->untyped_;
}
const ::io::prometheus::client::Histogram&
Metric::_Internal::histogram(const Metric* msg) {
  return *msg->histogram_;
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      label_(from.label_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gauge()) {
    gauge_ = new ::io::prometheus::client::Gauge(*from.gauge_);
  } else {
    gauge_ = nullptr;
  }
  if (from._internal_has_counter()) {
    counter_ = new ::io::prometheus::client::Counter(*from.counter_);
  } else {
    counter_ = nullptr;
  }
  if (from._internal_has_summary()) {
    summary_ = new ::io::prometheus::client::Summary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from._internal_has_untyped()) {
    untyped_ = new ::io::prometheus::client::Untyped(*from.untyped_);
  } else {
    untyped_ = nullptr;
  }
  if (from._internal_has_histogram()) {
    histogram_ = new ::io::prometheus::client::Histogram(*from.histogram_);
  } else {
    histogram_ = nullptr;
  }
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.Metric)
}

void Metric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&scc_info_Metric_metrics2_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gauge_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_ms_) -
      reinterpret_cast<char*>(&gauge_)) + sizeof(timestamp_ms_));
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gauge_;
  if (this != internal_default_instance()) delete counter_;
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete untyped_;
  if (this != internal_default_instance()) delete histogram_;
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_Metric_metrics2_2eproto.base);
  return *internal_default_instance();
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gauge_ != nullptr);
      gauge_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(counter_ != nullptr);
      counter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(summary_ != nullptr);
      summary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(untyped_ != nullptr);
      untyped_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(histogram_ != nullptr);
      histogram_->Clear();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.prometheus.client.LabelPair label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::detail::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.Gauge gauge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gauge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.Counter counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.Summary summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.Untyped untyped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_untyped(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::detail::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.Histogram histogram = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.prometheus.client.LabelPair label = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(1, this->_internal_label(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .io.prometheus.client.Gauge gauge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gauge(this), target, stream);
  }

  // optional .io.prometheus.client.Counter counter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::counter(this), target, stream);
  }

  // optional .io.prometheus.client.Summary summary = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::summary(this), target, stream);
  }

  // optional .io.prometheus.client.Untyped untyped = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::untyped(this), target, stream);
  }

  // optional int64 timestamp_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_ms(), target);
  }

  // optional .io.prometheus.client.Histogram histogram = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::histogram(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.prometheus.client.LabelPair label = 1;
  total_size += 1UL * this->_internal_label_size();
  for (const auto& msg : this->label_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .io.prometheus.client.Gauge gauge = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(
          *gauge_);
    }

    // optional .io.prometheus.client.Counter counter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(
          *counter_);
    }

    // optional .io.prometheus.client.Summary summary = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(
          *summary_);
    }

    // optional .io.prometheus.client.Untyped untyped = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(
          *untyped_);
    }

    // optional .io.prometheus.client.Histogram histogram = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(
          *histogram_);
    }

    // optional int64 timestamp_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::Int64Size(
          this->_internal_timestamp_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.Metric)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gauge()->::io::prometheus::client::Gauge::MergeFrom(from._internal_gauge());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_counter()->::io::prometheus::client::Counter::MergeFrom(from._internal_counter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_summary()->::io::prometheus::client::Summary::MergeFrom(from._internal_summary());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_untyped()->::io::prometheus::client::Untyped::MergeFrom(from._internal_untyped());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_histogram()->::io::prometheus::client::Histogram::MergeFrom(from._internal_histogram());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.InternalSwap(&other->label_);
  ::PROTOBUF_NAMESPACE_ID::detail::memswap<
      PROTOBUF_FIELD_OFFSET(Metric, timestamp_ms_)
      + sizeof(Metric::timestamp_ms_)
      - PROTOBUF_FIELD_OFFSET(Metric, gauge_)>(
          reinterpret_cast<char*>(&gauge_),
          reinterpret_cast<char*>(&other->gauge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricFamily::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricFamily>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_help(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MetricFamily::MetricFamily(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metric_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.prometheus.client.MetricFamily)
}
MetricFamily::MetricFamily(const MetricFamily& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  help_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  if (from._internal_has_help()) {
    help_.Set(::PROTOBUF_NAMESPACE_ID::detail::ArenaStringPtr::EmptyDefault{}, from._internal_help(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:io.prometheus.client.MetricFamily)
}

void MetricFamily::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&scc_info_MetricFamily_metrics2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  help_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MetricFamily::~MetricFamily() {
  // @@protoc_insertion_point(destructor:io.prometheus.client.MetricFamily)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricFamily::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
  help_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited());
}

void MetricFamily::ArenaDtor(void* object) {
  MetricFamily* _this = reinterpret_cast< MetricFamily* >(object);
  (void)_this;
}
void MetricFamily::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricFamily::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricFamily& MetricFamily::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::detail::InitSCC(&::scc_info_MetricFamily_metrics2_2eproto.base);
  return *internal_default_instance();
}


void MetricFamily::Clear() {
// @@protoc_insertion_point(message_clear_start:io.prometheus.client.MetricFamily)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      help_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricFamily::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::detail::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::detail::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::detail::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::detail::VerifyUTF8(str, "io.prometheus.client.MetricFamily.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string help = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_help();
          ptr = ::PROTOBUF_NAMESPACE_ID::detail::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::detail::VerifyUTF8(str, "io.prometheus.client.MetricFamily.help");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .io.prometheus.client.MetricType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::detail::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::io::prometheus::client::MetricType_IsValid(val))) {
            _internal_set_type(static_cast<::io::prometheus::client::MetricType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::detail::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .io.prometheus.client.Metric metric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::detail::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricFamily::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.prometheus.client.MetricFamily)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::SERIALIZE,
      "io.prometheus.client.MetricFamily.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string help = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_help().data(), static_cast<int>(this->_internal_help().length()),
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::SERIALIZE,
      "io.prometheus.client.MetricFamily.help");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_help(), target);
  }

  // optional .io.prometheus.client.MetricType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated .io.prometheus.client.Metric metric = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metric_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::
      InternalWriteMessage(4, this->_internal_metric(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::detail::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.prometheus.client.MetricFamily)
  return target;
}

size_t MetricFamily::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.prometheus.client.MetricFamily)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.prometheus.client.Metric metric = 4;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string help = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::StringSize(
          this->_internal_help());
    }

    // optional .io.prometheus.client.MetricType type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::detail::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::detail::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::detail::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricFamily::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.prometheus.client.MetricFamily)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricFamily* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricFamily>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.prometheus.client.MetricFamily)
    ::PROTOBUF_NAMESPACE_ID::detail::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.prometheus.client.MetricFamily)
    MergeFrom(*source);
  }
}

void MetricFamily::MergeFrom(const MetricFamily& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.prometheus.client.MetricFamily)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_.MergeFrom(from.metric_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_help(from._internal_help());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricFamily::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.prometheus.client.MetricFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricFamily::CopyFrom(const MetricFamily& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.prometheus.client.MetricFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricFamily::IsInitialized() const {
  return true;
}

void MetricFamily::InternalSwap(MetricFamily* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metric_.InternalSwap(&other->metric_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
  help_.Swap(&other->help_, &::PROTOBUF_NAMESPACE_ID::detail::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricFamily::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace prometheus
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::prometheus::client::LabelPair* Arena::CreateMaybeMessage< ::io::prometheus::client::LabelPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::LabelPair >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Gauge* Arena::CreateMaybeMessage< ::io::prometheus::client::Gauge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Gauge >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Counter* Arena::CreateMaybeMessage< ::io::prometheus::client::Counter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Counter >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Quantile* Arena::CreateMaybeMessage< ::io::prometheus::client::Quantile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Quantile >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Summary* Arena::CreateMaybeMessage< ::io::prometheus::client::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Untyped* Arena::CreateMaybeMessage< ::io::prometheus::client::Untyped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Untyped >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Histogram* Arena::CreateMaybeMessage< ::io::prometheus::client::Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Bucket* Arena::CreateMaybeMessage< ::io::prometheus::client::Bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::Metric* Arena::CreateMaybeMessage< ::io::prometheus::client::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::io::prometheus::client::MetricFamily* Arena::CreateMaybeMessage< ::io::prometheus::client::MetricFamily >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::prometheus::client::MetricFamily >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
