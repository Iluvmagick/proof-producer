name: Generate Proofs (Reusable)

on:
  workflow_call:
    inputs:
      artifact-name:
        description: "The name of the artifact with circuit.crct and assignment.tbl file pairs"
        required: true
        type: string
      proof-producer-ref:
        description: "Reference to proof-producer repository to checkout at"
        required: true
        type: string
      refs:
        description: "Multiline arg with modules' repo names and refs (e.g. `org/repo: ref`)"
        type: string
        required: false
      targets:
        type: string
        description: "Targets you want to craete proofs to. If empty, all target will be used"
        required: false
      boost-version:
        type: string
        description: "Version of Boost to install"
        required: false
        default: '1.81.0' # The least version supported by both matrix.os

      # Matrix parameters
      os:
        description: 'List of operating systems to run the workflow on (one per line)'
        required: false
        type: string
        default: |
          ubuntu-22.04
        # macos-12
      cpp-compiler:
        description: 'List of C++ compilers to use for building (one per line)'
        required: false
        type: string
        default: |
          g++
          clang++
      build-type:
        description: 'Build type (e.g., Release, Debug, one per line)'
        required: false
        type: string
        default: |
          Release

    outputs:
      artifact-name:
        description: "The name of the artifact with circuits, assignments and proofs"
        value: ${{ jobs.build-and-test.outputs.artifact-name }}


jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.set-matrix-outputs.outputs.os }}
      cpp-compiler: ${{ steps.set-matrix-outputs.outputs.cpp-compiler }}
      build-type: ${{ steps.set-matrix-outputs.outputs.build-type }}
    steps:
      - name: Set up job matrix outputs
        id: set-matrix-outputs
        run: |
          process_input() {
            echo "$1" | sed '/^\s*$/d' | jq -R -s -c 'split("\n") | if last == "" then .[:-1] else . end'
          }

          os=$(process_input "${{ inputs.os }}")
          cpp_compiler=$(process_input "${{ inputs.cpp-compiler }}")
          build_type=$(process_input "${{ inputs.build-type }}")

          echo "os=${os}" >> $GITHUB_OUTPUT
          echo "cpp-compiler=${cpp_compiler}" >> $GITHUB_OUTPUT
          echo "build-type=${build_type}" >> $GITHUB_OUTPUT


  build-and-test:
    needs: setup-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{fromJson(needs.setup-matrix.outputs.os)}}
        cpp_compiler: ${{fromJson(needs.setup-matrix.outputs.cpp-compiler)}}
        build_type: ${{fromJson(needs.setup-matrix.outputs.build-type)}}
      fail-fast: false
    outputs:
      artifact-name: ${{ steps.set-artifact-name.outputs.artifact-name }}

    env:
      PROOF_ARTIFACT_NAME: proofs

    steps:
      - name: Install dependencies
        run: |
          env && \
          sudo apt update && \
          sudo apt install -y \
            build-essential \
            libssl-dev \
            cmake \
            git \
            libicu-dev \
            curl \
            libspdlog-dev

      - name: Print toolchain information
        run: |
          git --version
          cc --version
          cmake --version

      - name: Checkout proof-producer
        uses: actions/checkout@v4
        with:
          repository: 'NilFoundation/proof-producer'
          ref: ${{ inputs.proof-producer-ref }}
          submodules: 'recursive'

      - name: Checkout modules to specified refs
        if: inputs.refs != ''
        uses: NilFoundation/ci-cd/actions/recursive-checkout@v1.1.1
        with:
          paths: |
            ${{ github.workspace }}/**
            !${{ github.workspace }}/**/.git/**
          refs: ${{ inputs.refs }}

      - name: Set usefull strings
        id: strings
        shell: bash
        run: |
          echo "build-dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
          echo "dependencies-dir=${{ github.workspace }}/../dependencies" >> $GITHUB_OUTPUT
          echo "artifact-dir=$(realpath ${{ github.workspace }}/../artifacts)" >> $GITHUB_OUTPUT

          # Get platform version
          if [[ ${{ runner.os }} == 'Linux' ]]; then
            platform_version=$(lsb_release -rs)
            proc_number=$(nproc)
          elif [[ ${{ runner.os }} == 'macOS' ]]; then
            platform_version=$(sw_vers -productVersion)
            proc_number=$(sysctl -n hw.logicalcpu)
          fi
          echo "platform-version=${platform_version}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.strings.outputs.artifact-dir }}

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.4
        id: install-boost
        with:
          boost_version: ${{ inputs.boost-version }}
          # Extract version number from matrix.os by replacing os_name-
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          platform_version: ${{ steps.strings.outputs.platform-version }}
          boost_install_dir: ${{ steps.strings.outputs.dependencies-dir }}

      - name: Configure CMake
        env:
          BOOST_ROOT: "${{ steps.install-boost.outputs.BOOST_ROOT }}"
        run: |
          cmake \
            -G "Unix Makefiles" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build proof-producer
        working-directory: ${{ steps.strings.outputs.build-dir }}
        run: |
          make -j $(nproc)

      - name: List artifacts
        working-directory: ${{ steps.strings.outputs.artifact-dir }}
        run: find .

      - name: Make proofs for pairs
        working-directory: ${{ steps.strings.outputs.artifact-dir }}
        run: |
          targets_str=$(echo "${{ inputs.targets }}" | awk '{$1=$1};1' | sed '/^$/d' | tr '\n' ' ' | sed 's/ $//')
          echo "targets from input: ${targets_str}"
          ${{ github.workspace }}/tests/make_proof_for_pairs.sh ${targets_str}

      # Artifacts from different matrix combinations will overwrite each other, but who cares
      - name: Upload circuits, assignments and proofs artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROOF_ARTIFACT_NAME }}
          path: |
            ${{ steps.strings.outputs.artifact-dir }}

      - name: Set artifact name output
        id: set-artifact-name
        run: |
          echo "artifact-name=${{ env.PROOF_ARTIFACT_NAME }}" >> $GITHUB_OUTPUT
